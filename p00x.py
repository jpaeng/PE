""" Project Euler Problems 1-9
"""


import math
import scipy.special
import common

from timeit import default_timer as timer


# Problem 1:  Sum of Multiples
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.


def sum_of_multiples(max_n, k):
    """
    Sum all integers from 0 to max_n that are multiples of n
    Note:
        n + 2n + 3n + ...   = n(1+2+3+...)
        1 + 2 + 3 + ... + p = p*(p+1)/2
    """
    p = int(max_n / k)  # integer division
    return k * (p * (p + 1) / 2)


def sum_of_two_multiples(max_n, k1, k2):
    return sum_of_multiples(max_n, k1) + sum_of_multiples(max_n, k2) - sum_of_multiples(max_n, k1*k2)


# Problem 2:  Sum Even Fibonacci
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 15 terms will be:
#     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.


def sum_even_fibonacci(max_n):
    """
    sum just the even terms
    every third term is even
    n = current term
    n_3 = (n-3)th term
    next term = 4*n + n_3

    only valid for max_n >= 10
    """
    n = 8
    n_3 = 2
    total = 10

    while n <= max_n:
        n, n_3 = 4 * n + n_3, n
        total += n

    total -= n

    return total


# Problem 3:  Largest Prime Factor
# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?


def largest_prime_factor(n):
    if n < 2:
        return 0

    # Remove factor out all 2s
    if n % 2 == 0:
        last_factor = 2
        n /= 2
        while n % 2 == 0:
            n /= 2
    else:
        last_factor = 3

    # At this point, only odd factors remain
    factor = 3
    max_factor = int(math.sqrt(n))+1
    while n > 1 and factor < max_factor:
        if n % factor == 0:
            n /= factor
            last_factor = factor
            while n % factor == 0:
                n /= factor
            max_factor = int(math.sqrt(n))+1
        factor += 2

    if n == 1:
        return last_factor
    else:
        return n


# Problem 4:  Largest Palindrome
# A palindromic number reads the same both ways.
# The largest palindrome made from the product of two 2-digit numbers is 9009 = 91x99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def is_num_palindrome(n):
    if n < 10:
        return True
    else:
        return common.is_str_palindrome(str(n))


def largest_palindrome_product(num, maxfactor):
    n = None
    f1 = None
    f2 = None
    for n in range(num, 0, -1):
        if is_num_palindrome(n):
            for f1 in range(maxfactor, 0, -1):
                if n/f1 > maxfactor:
                    break
                elif n % f1 == 0:
                    f2 = int(n/f1)
                    break
            if f2 is not None:
                break
    return n, f1, f2


# Problem 5:  Least Common Multiple
# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?


def least_common_multiple_of_sequence(maxfactor):
    product = 1
    prime_list = common.sieve_erathosthenes(maxfactor)
    for prime in prime_list:
        prime_product = prime
        while prime_product <= maxfactor:
            product *= prime
            prime_product *= prime
    return product


# Problem 6:  Sum of Squares, Square of Sum
# The sum of the squares of the first ten natural numbers is,
# 1^2 + 2^2 + ... + 10^2 = 385

# The square of the sum of the first ten natural numbers is,
# (1 + 2 + ... + 10)^2 = 55^2 = 3025

# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.


def square_of_sum_minus_sum_of_squares(max_n):
    simple_sum = 0
    sum_of_squares = 0
    for n in range(1, max_n+1):
        simple_sum += n
        sum_of_squares += n*n

    return simple_sum * simple_sum - sum_of_squares


# Problem 7:  Nth Prime
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10 001st prime number?

# There are approximately X/ln(X) primes among the first X numbers.
# So the nth prime will be close to the number -nW(-1/n) where W() is the Lambert product log function.


def nth_prime(n):
    # valid for n >= 4
    search_range = (-n)*(scipy.special.lambertw(-1.0/n, -1)).real
    prime_list = common.sieve_erathosthenes(int(search_range))
    return prime_list[n-1]


# Problem 8:  Greatest Product of Digits
# Find the greatest product of five consecutive digits in the 1000-digit number.


def handle_zero(index, prod_count, string_length, window_list, num_string):
    prod = 1
    if index+prod_count < string_length:
        window_list[0] = 1
        for window_index in range(1, prod_count):
            window_list[window_index] = int(num_string[index+window_index])
            if window_list[window_index] == 0:
                index, prod = handle_zero(index+window_index, prod_count, string_length, window_list, num_string)
                index -= prod_count
                break
            else:
                prod *= window_list[window_index]
    index += prod_count
    return index, prod


def greatest_product_of_n_digits(num_string, prod_count):
    prod = 1
    max_prod = 0
    string_length = len(num_string)
    window_list = []
    window_index = 0
    if prod_count < string_length:
        for window_index in range(prod_count):
            window_list.append(int(num_string[window_index]))
            prod *= window_list[window_index]
        max_prod = prod
        max_window_index = prod_count - 1
        index = prod_count
        while index < string_length:
            if window_index >= max_window_index:
                window_index = 0
            else:
                window_index += 1
            prod /= window_list[window_index]
            window_list[window_index] = int(num_string[index])
            if window_list[window_index] == 0:
                index, prod = handle_zero(index, prod_count, string_length, window_list, num_string)
            else:
                prod *= window_list[window_index]
                index += 1
            max_prod = max(max_prod, prod)
    return max_prod


def greatest_product_of_n_digits_brute_force(num_string, prod_count):
    string_length = len(num_string)
    num_list = []
    max_prod = 1
    if prod_count < string_length:
        for index in range(prod_count):
            num_list.append(int(num_string[index]))
        for index in range(prod_count, string_length):
            num_list.append(int(num_string[index]))
            max_prod = max(max_prod, num_list[index] * num_list[index-1] * num_list[index-2] * num_list[index-3] *
                           num_list[index-4])
    return max_prod


def greatest_product_of_n_digits_list_comprehensions(num_string, prod_count):
    string_length = len(num_string)
    max_prod = 0
    if prod_count < string_length:
        num_list = [int(num_string[i]) for i in range(string_length)]
        for i in range(prod_count, string_length):
            prod = 1
            for j in range(prod_count):
                prod *= num_list[i-j]
            max_prod = max(max_prod, prod)
    return max_prod


# Problem 9:  Pythagorean Triplet
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
#     a^2 + b^2 = c^2
# For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.


def pythagorean_triplet_product(pyth_sum):
    a = 0
    b = 0
    c = 0
    result = -1
    for a in range(1, int(pyth_sum / 2)):
        for c in range(int((pyth_sum - a) / 2), pyth_sum - 2 * a):
            b = pyth_sum - a - c
            if a**2 + b**2 == c**2:
                result = a * b * c
                break
        if result > 0:
            break
    return a, b, c, result


# Problem 1-9 Checks
if __name__ == '__main__':  # only if run as a script, skip when imported as module
    problem_num = 1

    if problem_num == 1:
        print(sum_of_two_multiples(9, 3, 5))
        print(sum_of_two_multiples(999, 3, 5))
    elif problem_num == 2:
        print(sum_even_fibonacci(10))
        print(sum_even_fibonacci(33))
        print(sum_even_fibonacci(34))
        print(sum_even_fibonacci(35))
        print(sum_even_fibonacci(3999999))
    elif problem_num == 3:
        print(largest_prime_factor(5))
        print(largest_prime_factor(13195))
        print(largest_prime_factor(600851475143))
    elif problem_num == 4:
        print(largest_palindrome_product(100, 15))
        print(largest_palindrome_product(10000, 99))
        print(largest_palindrome_product(1000000, 999))
        print(largest_palindrome_product(100000000, 9999))
    elif problem_num == 5:
        print(least_common_multiple_of_sequence(10))
        print(least_common_multiple_of_sequence(20))
    elif problem_num == 6:
        print(square_of_sum_minus_sum_of_squares(10))
        print(square_of_sum_minus_sum_of_squares(100))
    elif problem_num == 7:
        print(nth_prime(4))
        print(nth_prime(6))
        print(nth_prime(10))
        print(nth_prime(150))
        print(nth_prime(10001))
    elif problem_num == 8:
        pr8_string = '73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450'
        print(len(pr8_string))

        print(greatest_product_of_n_digits(pr8_string, 5))
        print(greatest_product_of_n_digits_brute_force(pr8_string, 5))
        print(greatest_product_of_n_digits_list_comprehensions(pr8_string, 5))

        # Time Check
        count = 1000
        start = timer()
        for z in range(count):
            greatest_product_of_n_digits(pr8_string, 5)
        time1 = timer()
        for z in range(count):
            greatest_product_of_n_digits_brute_force(pr8_string, 5)
        time2 = timer()
        for z in range(count):
            greatest_product_of_n_digits_list_comprehensions(pr8_string, 5)
        time3 = timer()

        print(time1-start)  # in ms
        print(time2-time1)  # in ms
        print(time3-time2)  # in ms
    elif problem_num == 9:
        print(pythagorean_triplet_product(1000))
        if False:
            # for n in range(5, 20):
            for z in range(5, 1010):
                ans = pythagorean_triplet_product(z)
                if ans[3] > 0:
                    print(z, ans)
